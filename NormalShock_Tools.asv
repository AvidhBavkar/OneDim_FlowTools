%% Contains some math for normal shock relations
classdef NormalShock_Tools
methods(Static)
    function exit_mach = nozzle_exit_mach_shock_in_nozzle(gamma, upstream_ptot, exit_pstat, throat_area, exit_area)
        g=gamma;
        gp1=gamma+1;
        gm1=gamma-1;
        p_ratio = upstream_ptot./exit_pstat;
        a_ratio = throat_area./exit_area;
    
        exit_mach = sqrt(1/gm1 .* (...
            -1 + ( 1 + 2.*gm1.*(2/gp1).^(gp1/gm1).*...
            (p_ratio.*a_ratio).^2).^(1./2)));
    end
    
    function a_ratio = shock_a_ratio(gamma, upstream_ptot, exit_pstat, throat_area, exit_area)
        % Gets the ratio (A/A*) at which a normal shock exists in a nozzle
        % 
        % See also nozzle_exit_mach_shock_in_nozzle

        exit_mach = NormalShock_Tools.nozzle_exit_mach_shock_in_nozzle(gamma, upstream_ptot, exit_pstat, throat_area, exit_area);
        exit_totstat_pratio = IsentropicFlow_Tools.totstat_pratio_FROM_mach(gamma, exit_mach);
        
        a_ratio = IsentropicFlow_Tools.aratio_FROM_mach(gamma, exit_mach);
    end
    
    function mach = upstream_mach_FROM_totPratio(gamma, totp_aftershock, totp_beforeshock)
        
        g = gamma;
        gp1 = gamma+1;
        gm1 = gamma-1;
        target_ptotratio = totp_aftershock./totp_beforeshock;
    
        options = optimoptions('fmincon','disp','off');
        fun= @(m_mach) abs(target_ptotratio - ...
            ( ((0.5.*gp1.*m_mach.^2).^(g/gm1).*(1+0.5.*gm1.*m_mach.^2).^(g/(1-g)))./(((2.*g./g+1).*m_mach.^2-(gm1/gp1)).^(1/gm1)) ...
            ));
        
                fun= @(m_mach) abs(target_ptotratio - ...

        
        mach_min = 1; %Inlet Mach must be supersonic for shock to exist
        mach_max = 100;
        mach_guess = 2.5;

        mach = fmincon( ...
            fun, mach_guess, [],[],[],[], mach_min, mach_max,[],options);

    end
end
end